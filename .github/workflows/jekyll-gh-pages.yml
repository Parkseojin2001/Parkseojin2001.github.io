# .github/workflows/jekyll-gh-pages.yml

# 워크플로우 이름
name: Deploy Jekyll site to GitHub Pages

on:
  # "main" 브랜치에 push될 때 실행
  push:
    branches: ["main"]

  # Actions 탭에서 수동으로 실행 가능하게 함
  workflow_dispatch:

# GITHUB_TOKEN에 배포 권한 설정
permissions:
  contents: read
  pages: write
  id-token: write

# 동시 배포는 하나만 허용
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 빌드 잡
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. 레포지토리 코드 가져오기
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Ruby 환경 설정
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          # bundler-cache는 사용하지 않고, 아래에서 직접 캐시와 설치를 관리합니다.

      # 3. Gem 캐시 설정
      # Gemfile.lock 파일이 변경되지 않았다면, 캐시를 사용하여 설치 속도를 높입니다.
      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      # 4. 의존성 설치 (가장 중요한 단계)
      # Gem을 프로젝트 폴더 내의 vendor/bundle에 설치하도록 설정하고, bundle install을 실행합니다.
      - name: Install dependencies
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      # 5. GitHub Pages 배포 준비
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # 6. Jekyll 사이트 빌드
      # 이제 bundle exec가 vendor/bundle에 설치된 jekyll을 찾을 수 있습니다.
      - name: Build with Jekyll
        run: bundle exec jekyll build

      # 7. 빌드 결과물 업로드
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # 배포 잡 (변경 없음)
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
